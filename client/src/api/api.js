import axios from 'axios';

// ‚úÖ Í∏∞Î≥∏ Î∞è ÎåÄÏ≤¥ API ÏÑúÎ≤Ñ Ï£ºÏÜå
const primaryBaseURL = process.env.REACT_APP_BASE_URL
  ? `${process.env.REACT_APP_BASE_URL}/api` // Î∞∞Ìè¨Îêú ÌôòÍ≤Ω
  : 'http://localhost:5000/api'; // Î°úÏª¨ ÌôòÍ≤Ω Í∏∞Î≥∏Í∞í

const fallbackBaseURL = 'http://localhost:5000/api'; // Î°úÏª¨ ÏÑúÎ≤Ñ

// ‚úÖ ÌòÑÏû¨ Ïó∞Í≤∞Îêú ÏÑúÎ≤Ñ Î°úÍ∑∏ Ï∂úÎ†•
console.log(`üåê Primary Base URL: ${primaryBaseURL}`);
console.log(`üåê Fallback Base URL: ${fallbackBaseURL}`);

// ‚úÖ Axios Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
const api = axios.create({
  baseURL: primaryBaseURL, // Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Î∞∞Ìè¨Îêú ÏÑúÎ≤ÑÎ°ú ÏãúÏûë
  headers: {
    'Content-Type': 'application/json',
  },
});

// ‚úÖ ÏöîÏ≤≠ Ïù∏ÌÑ∞ÏÖâÌÑ∞: ÌÜ†ÌÅ∞ Ï∂îÍ∞Ä Î∞è ÏöîÏ≤≠ Î°úÍπÖ
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('accessToken');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    console.log('üöÄ [REQUEST] Sending to:', config.baseURL + config.url); // ÏöîÏ≤≠ Ï£ºÏÜå Ï∂úÎ†•
    return config;
  },
  (error) => {
    console.error('‚ùå [REQUEST ERROR]:', error);
    return Promise.reject(error);
  },
);

// ‚úÖ ÏùëÎãµ Ïù∏ÌÑ∞ÏÖâÌÑ∞: ÏùëÎãµ Î°úÍπÖ Î∞è ÏóêÎü¨ Ï≤òÎ¶¨
api.interceptors.response.use(
  (response) => {
    console.log(
      '‚úÖ [RESPONSE] From:',
      response.config.baseURL + response.config.url,
    );
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    if (
      error.response &&
      error.response.status === 401 &&
      !originalRequest._retry
    ) {
      originalRequest._retry = true;
      const refreshToken = localStorage.getItem('refreshToken');
      if (refreshToken) {
        try {
          const res = await api.post('/user/refresh', { refreshToken });
          const { accessToken, refreshToken: newRefreshToken } = res.data;

          localStorage.setItem('accessToken', accessToken);
          if (newRefreshToken) {
            localStorage.setItem('refreshToken', newRefreshToken);
          }

          api.defaults.headers.common[
            'Authorization'
          ] = `Bearer ${accessToken}`;
          originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;

          return api(originalRequest);
        } catch (err) {
          console.error('‚ùå [TOKEN REFRESH ERROR]:', err);
          localStorage.removeItem('accessToken');
          localStorage.removeItem('refreshToken');
        }
      }
    }

    if (
      originalRequest.baseURL === primaryBaseURL &&
      !originalRequest._retry &&
      (!error.response || error.response.status >= 500)
    ) {
      console.warn(
        '‚ö†Ô∏è [ERROR] Primary server failed. Retrying with local server...',
      );
      originalRequest._retry = true;
      originalRequest.baseURL = fallbackBaseURL;
      console.log(
        'üîÑ [RETRY] Switching to:',
        fallbackBaseURL + originalRequest.url,
      );
      return api(originalRequest);
    }

    console.error('‚ùå [RESPONSE ERROR]:', error);
    return Promise.reject(error);
  },
);

export default api;
